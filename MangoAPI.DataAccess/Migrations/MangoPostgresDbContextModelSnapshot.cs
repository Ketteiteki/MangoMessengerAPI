// <auto-generated />
using System;
using MangoAPI.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MangoAPI.DataAccess.Migrations
{
    [DbContext(typeof(MangoPostgresDbContext))]
    partial class MangoPostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CommunityType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WSB Public Group",
                            Image = "wsb_group_logo.png",
                            MembersCount = 5,
                            Title = "WSB"
                        },
                        new
                        {
                            Id = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code Main Public Group",
                            Image = "extreme_code_main.jpg",
                            MembersCount = 4,
                            Title = "Extreme Code Main"
                        },
                        new
                        {
                            Id = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code Flood Public Group",
                            Image = "extremecode_rest_logo.jpg",
                            MembersCount = 4,
                            Title = "Extreme Code Flood"
                        },
                        new
                        {
                            Id = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code C++ Public Group",
                            Image = "extremecode_cpp_logo.jpg",
                            MembersCount = 4,
                            Title = "Extreme Code C++"
                        },
                        new
                        {
                            Id = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code .NET Public Group",
                            Image = "extremecode_dotnet.png",
                            MembersCount = 4,
                            Title = "Extreme Code .NET"
                        },
                        new
                        {
                            Id = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Khachatur Khachatryan and razumovsky r",
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / razumovsky r"
                        },
                        new
                        {
                            Id = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Мусяка Колбасяка and razumovsky r",
                            MembersCount = 2,
                            Title = "Мусяка Колбасяка / razumovsky r"
                        },
                        new
                        {
                            Id = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Amelit and razumovsky r",
                            MembersCount = 2,
                            Title = "Amelit / razumovsky r"
                        },
                        new
                        {
                            Id = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Khachatur Khachatryan and Мусяка Колбасяка",
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / Мусяка Колбасяка"
                        },
                        new
                        {
                            Id = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Petro Kolosov and Szymon Murawski",
                            MembersCount = 2,
                            Title = "Petro Kolosov / Szymon Murawski"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("text");

                    b.Property<int>("AuthorPublicKey")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88e5e010-3aec-407b-8fcc-4a4ae55d3ae2"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hello guys, how your diploma project goes?",
                            CreatedAt = new DateTime(2021, 8, 11, 14, 48, 21, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("ec82585e-bc96-456a-a7f1-53d5f282cbe4"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Well, I'm doing UI/UX part of the project",
                            CreatedAt = new DateTime(2021, 8, 11, 14, 53, 2, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("063223af-e31e-407e-bb41-d648e2421cd4"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hi teacher, I perform QA of the current version",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 53, 35, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("9c87db8e-e53a-4aa9-8352-fd3dd6312b8e"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Greetings. I currently workout the back-end part",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 53, 57, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("38f7579f-4f4c-4a6f-9b27-cbb3a14ba15b"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "I work with backend too...",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 55, 5, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("d4a2b695-2b95-4e78-869b-ab6dada55226"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Great! Good luck to all of you",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 59, 5, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("45ef6339-f21c-4c12-8786-c7f3f1d7d0c3"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 13, 49, 21, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("f7ffde6b-8b23-4067-99bd-19fd668cd94c"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "F# The Best",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 21, 56, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("fd6ac51d-00ff-48b1-a702-239e03bc6357"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "C# The Best",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 22, 12, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("4716fde5-98e8-415c-a11d-e12867a98a73"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "TypeScript The Best",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 32, 32, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("1008db2b-ad58-4351-b8b1-d918bc488918"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("0d0fd698-a8f4-4330-808b-2ba1e8dc14fb"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 36, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("e8e552ee-5933-4f53-aea5-6fab92142685"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 45, 13, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("19a1a846-54fe-4e1b-b8d3-4a6bf0c200d7"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 45, 56, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("f3d4b120-a038-4581-8557-d4ba241347a3"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("6d3d2f7b-4ec0-43ab-a136-b8f8bf3086c3"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("85eb170d-9500-4d7b-a77c-c84afd7b1257"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("27fbdf80-8e50-4c32-ab8a-bb43bc0ad6aa"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("8da39dba-b645-481c-8980-18ec3688d51a"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("b5b7e112-e2cd-4fa2-ba2e-cbf4d7b51ef7"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("b5dde247-8594-4fd7-a23d-590dae629201"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("7d86663e-d92b-4939-af91-7569c73cd820"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("ae405302-ddb6-4f2f-bb89-e6fbd3c1cb60"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 42, 14, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("35dd74e9-b31b-4ef0-bdfe-a646d133e909"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 46, 29, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("88cd7ff6-bd47-4847-96d1-920a90e89085"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 44, 12, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("2367df0d-0b4e-4733-8d26-a6c7c02b9a39"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 44, 59, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("1b386b02-38c7-4f41-b24b-d2b085d9bced"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("3ea955c5-2b15-4361-86c0-6253085443d3"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("1707d26e-6cb1-4fbf-ac8a-76b6a24f8af9"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("199f4867-ca50-4852-809f-24a67ed9d2f0"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("be87bfe8-d769-4ff1-9ee2-639a4771f4b7"),
                            AuthorPublicKey = 0,
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            Content = "Hi teacher",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            IsEncrypted = false,
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordRestoreRequests");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32904a05-6d7c-43cf-b915-223324ff480e"),
                            ConcurrencyStamp = "00a34f8e-cafc-4da8-a48f-f3117ec88ced",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("1c48f8d5-01ed-4e47-8377-a22ffa58c150"),
                            ConcurrencyStamp = "89418c2b-a5b4-4844-baab-44bd39358f4e",
                            Name = "Unverified",
                            NormalizedName = "UNVERIFIED"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6d4f44a-71ba-40bc-a779-3538975daefa"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2073),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("e101608d-ba15-4ba9-8e62-ae045b677cf2"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2396),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("2bdbc749-04d3-4846-9271-6da04e8841a7"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2400),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("13202984-cf28-4b7b-aa56-1e5712204128"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2402),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("c9211be5-da77-49e2-b0ab-b155300aeddb"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2404),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("d546001a-be04-4684-a936-bf7479053d00"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2406),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("ab4d74fe-6e33-48c6-953f-42b52f95eb3c"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2418),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("26942fde-de69-4779-ab56-777b2b45b2bf"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2420),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("e0e7c433-b263-4f1f-b4e4-ea6cbe8d4264"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2422),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("13c1dba6-a4b0-4ea8-9579-07f86cdd92c3"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2424),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("1d01d676-b3a5-45bf-8abe-db346c0a7582"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2426),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("0d81d14a-f91d-4d95-b0f8-f61122ce64c8"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2427),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("01e1bfb9-9f81-40c3-b4ac-ea66d23c4624"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2429),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("2b42fb48-359b-4d1c-9bea-31c8dc06277c"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2432),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("bad6ebf8-5846-4917-b40d-d89afe2bd6c8"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2437),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("be501433-c136-437c-9230-e1cc8555bdff"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2438),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("2f3815f0-1d03-4c1a-9a93-a3f0616f618f"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2486),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("22b8eed8-b9a3-4a9c-a81e-11c3ed6bd39c"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2488),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("55099918-d9e9-4a1c-ac67-60955f68e9db"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2490),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("5efaa878-4f38-4756-b9f3-813dce2b9172"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2492),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("e1cb2276-1c46-4ecb-a623-c59580051979"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2494),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("69afb849-0e32-4ee3-b3ce-7855454b3b66"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2496),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("5bf84053-188a-4c09-8443-af9dafc6109c"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2501),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("e397192a-ad18-4805-b8fc-fb1f029267cd"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2503),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("5ff17164-9186-46ba-a842-09915045c34a"),
                            ContactId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2505),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("5e9288d4-bf47-4402-b967-199432d7fac0"),
                            ContactId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2507),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("ccd6df28-74f9-4061-baf8-d3e9b2c50b98"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2508),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("95c022fb-1adc-4c2f-bc79-31f437ef5063"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2021, 9, 18, 23, 14, 8, 992, DateTimeKind.Utc).AddTicks(2510),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("PublicKey")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            AccessFailedCount = 0,
                            Bio = "13 y. o. | C# pozer, Hearts Of Iron IV noob",
                            ConcurrencyStamp = "6f3a7bca-229d-440b-8dc8-fd5ec97ca9f5",
                            DisplayName = "Khachatur Khachatryan",
                            Email = "xachulxx@gmail.com",
                            EmailConfirmed = true,
                            Image = "khachatur_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "XACHULXX@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEErjGJqMwGrk4ZVx/2EwSW07MxXmpRSrI1/VA9KjSzv9bN4LJJpKYZOnnEjbOXmFOQ==",
                            PhoneNumber = "374775554310",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "KHACHATUR228"
                        },
                        new
                        {
                            Id = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            AccessFailedCount = 0,
                            Bio = "11011 y.o Dotnet Developer from $\"{cityName}\"",
                            ConcurrencyStamp = "5352280c-7bef-4686-beca-4b384861377e",
                            DisplayName = "razumovsky r",
                            Email = "kolosovp95@gmail.com",
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLOSOVP94@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELh2PHFqzd19RD8xuGhKoaNJwifIfBdcHU8Ldr1ACcncNjKweIwtcjGSBBNUc7HCMQ==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "razumovsky_r"
                        },
                        new
                        {
                            Id = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            AccessFailedCount = 0,
                            Bio = "Колбасятор.",
                            ConcurrencyStamp = "51fdd00a-c4e2-43ed-bba1-f7684ecca0d5",
                            DisplayName = "Мусяка Колбасяка",
                            Email = "kolbasator@gmail.com",
                            EmailConfirmed = true,
                            Image = "musyaka_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLBASATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQiN//DuZsaOCXGVNNglgEYK47t+29rabQ816xcqh9HXNiv+oEF9AwkAS/i0cXROQ==",
                            PhoneNumber = "77017506265",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "kolbasator"
                        },
                        new
                        {
                            Id = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            AccessFailedCount = 0,
                            Bio = "Дипломат",
                            ConcurrencyStamp = "458a0956-d8aa-42b0-b7d3-54a6d6ef6af5",
                            DisplayName = "Amelit",
                            Email = "amelit@gmail.com",
                            EmailConfirmed = true,
                            Image = "amelit_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELIT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFNJJOmTzvjmq8SQjGIcvdn3Em86gbiR3PyBrEJce032hHfWBLdXY/I2fVEmNDX6cg==",
                            PhoneNumber = "12025550152",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "TheMoonlightSonata"
                        },
                        new
                        {
                            Id = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "ba9716b9-eb64-48ae-9261-3f0d13be3c5b",
                            DisplayName = "Petro Kolosov",
                            Email = "petro.kolosov@wp.pl",
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETRO.KOLOSOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAHik3lsH05OP9owMCqRLAJk2JER4mW30Tl7Nmvh0sPf6BO69gmWszjDBUpCgQhK2Q==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "petro.kolosov"
                        },
                        new
                        {
                            Id = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            AccessFailedCount = 0,
                            Bio = "Teacher of Computer Science at WSB Poznan",
                            ConcurrencyStamp = "cbc0e1cb-279b-4e3c-b9ab-6e7da76f31e7",
                            DisplayName = "Szymon Murawski",
                            Email = "szymon.murawski@wp.pl",
                            EmailConfirmed = true,
                            Image = "szymon_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SZYMON.MURAWSKI@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGC9ahsF9T8JTXPs3PBsR3RnW8Q4n2y08iojE0R10q5Vb3Mej+4TUw+UHuzjPRunJw==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "szymon.murawski"
                        },
                        new
                        {
                            Id = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "39310a4b-f53d-47a6-b648-2cbd2ba69675",
                            DisplayName = "Illia Zubachov",
                            Email = "illia.zubachov@wp.pl",
                            EmailConfirmed = true,
                            Image = "illia_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILLIA.ZUBACHOW@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAVxCkqVlmtCfqBNae9b1JEYLW7Mm3HIafHhoOjN38NSBXIocmQ7AotvOWBduTaldg==",
                            PhoneNumber = "48352643123",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "illia.zubachov"
                        },
                        new
                        {
                            Id = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "692b89d8-1870-4c5f-905a-dd1aa7beabe5",
                            DisplayName = "Arslanbek Temirbekov",
                            Email = "arslanbek.temirbekov@wp.pl",
                            EmailConfirmed = true,
                            Image = "arslan_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSLANBEK.TEMIRBEKOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAELgB40Xs20Uo7sioNY5jTmEvD2EFHqZQm3N+QHT80hSDLKAGVD035QyD82+++lHC1Q==",
                            PhoneNumber = "48278187781",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "arslanbek.temirbekov"
                        },
                        new
                        {
                            Id = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "f60e14f7-b383-44fb-acb4-6f4165bdea26",
                            DisplayName = "Serhii Holishevskii",
                            Email = "serhii.holishevskii@wp.pl",
                            EmailConfirmed = true,
                            Image = "serhii_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERHII.HOLISHEVSKII@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+6wkDZzHzFkWi8thjAFqLtqOvFZDR+xFatFcHboR7nCQeIPHx8nZe1+q0K62yKnw==",
                            PhoneNumber = "48175481653",
                            PhoneNumberConfirmed = true,
                            PublicKey = 0,
                            TwoFactorEnabled = false,
                            UserName = "serhii.holishevskii"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8deed7c-8cb4-498f-91ba-36ea81bef77c"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "petro.kolosov",
                            FirstName = "Petro",
                            Instagram = "petro.kolosov",
                            LastName = "Kolosov",
                            LinkedIn = "petro.kolosov",
                            Twitter = "petro.kolosov",
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            Website = "petro.kolosov.com"
                        },
                        new
                        {
                            Id = new Guid("7305c572-6b0d-429b-9c64-b38a0f2a7dec"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "illia.zubachov",
                            FirstName = "Illia",
                            Instagram = "illia.zubachov",
                            LastName = "Zubachov",
                            LinkedIn = "illia.zubachov",
                            Twitter = "illia.zubachov",
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            Website = "illia.zubachov.com"
                        },
                        new
                        {
                            Id = new Guid("674863b2-6f5e-4586-9a6b-92840061e4b6"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "serhii.holishevskii",
                            FirstName = "Serhii",
                            Instagram = "serhii.holishevskii",
                            LastName = "Holishevskii",
                            LinkedIn = "serhii.holishevskii",
                            Twitter = "serhii.holishevskii",
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            Website = "serhii.holishevskii.com"
                        },
                        new
                        {
                            Id = new Guid("52aca6ea-a35c-42f5-8407-f9bc20825748"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "arslan.temirbekov",
                            FirstName = "Arslan",
                            Instagram = "arslan.temirbekov",
                            LastName = "Temirbekov",
                            LinkedIn = "arslan.temirbekov",
                            Twitter = "arslan.temirbekov",
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            Website = "arslan.temirbekov.com"
                        },
                        new
                        {
                            Id = new Guid("993d9441-f277-44d4-859e-ed3a33aae13b"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "szymon.murawski",
                            FirstName = "Szymon",
                            Instagram = "szymon.murawski",
                            LastName = "Murawski",
                            LinkedIn = "szymon.murawski",
                            Twitter = "szymon.murawski",
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            Website = "szymon.murawski.com"
                        },
                        new
                        {
                            Id = new Guid("39dff792-5d5e-4e9a-846a-01fb98e41de4"),
                            Address = "Moscow, Russia",
                            BirthDay = new DateTime(2008, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Khachatur",
                            Instagram = "khachapur.mudrenych",
                            LastName = "Khachatryan",
                            LinkedIn = "khachapur.mudrenych",
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            Website = "khachapur.com"
                        },
                        new
                        {
                            Id = new Guid("8f2da623-1061-404c-8892-1497ad491d53"),
                            Address = "Odessa, Ukraine",
                            BirthDay = new DateTime(1994, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "razumovsky_r",
                            FirstName = "razumovsky",
                            Instagram = "razumovsky_r",
                            LastName = "r",
                            LinkedIn = "razumovsky_r",
                            Twitter = "razumovsky_r",
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            Website = "razumovsky.com"
                        },
                        new
                        {
                            Id = new Guid("d1c4b499-855a-4ed4-840c-9a4538b7f921"),
                            Address = "Saint-Petersburg, Russia",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "kolbasator",
                            FirstName = "Мусяка",
                            LastName = "Колбасяка",
                            ProfilePicture = "profile.png",
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            Website = "kolbasator.com"
                        },
                        new
                        {
                            Id = new Guid("59e525b1-384a-45a0-a16c-0dd7d712abb9"),
                            Address = "Moscow, Russia",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "TheMoonlightSonata",
                            FirstName = "Amelit",
                            Instagram = "TheMoonlightSonata",
                            Twitter = "TheMoonlightSonata",
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("PasswordRestoreRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MangoAPI.Domain.Entities.UserInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Messages");

                    b.Navigation("PasswordRestoreRequests");

                    b.Navigation("Sessions");

                    b.Navigation("UserChats");

                    b.Navigation("UserInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
