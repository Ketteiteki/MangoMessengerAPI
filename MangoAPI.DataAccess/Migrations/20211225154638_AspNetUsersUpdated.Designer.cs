// <auto-generated />
using System;
using MangoAPI.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MangoAPI.DataAccess.Migrations
{
    [DbContext(typeof(MangoPostgresDbContext))]
    [Migration("20211225154638_AspNetUsersUpdated")]
    partial class AspNetUsersUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CommunityType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastMessageAuthor")
                        .HasColumnType("text");

                    b.Property<string>("LastMessageText")
                        .HasColumnType("text");

                    b.Property<string>("LastMessageTime")
                        .HasColumnType("text");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WSB Public Group",
                            Image = "wsb_group_logo.png",
                            LastMessageAuthor = "Szymon Murawski",
                            LastMessageText = "Great! Good luck to all of you",
                            LastMessageTime = "9:59 PM",
                            MembersCount = 5,
                            Title = "WSB",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(4727)
                        },
                        new
                        {
                            Id = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code Main Public Group",
                            Image = "extreme_code_main.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "TypeScript The Best",
                            LastMessageTime = "2:32 PM",
                            MembersCount = 4,
                            Title = "Extreme Code Main",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7852)
                        },
                        new
                        {
                            Id = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code Flood Public Group",
                            Image = "extremecode_rest_logo.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Слава Партии!!",
                            LastMessageTime = "6:45 PM",
                            MembersCount = 4,
                            Title = "Extreme Code Flood",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7863)
                        },
                        new
                        {
                            Id = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code C++ Public Group",
                            Image = "extremecode_cpp_logo.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "6:45 PM",
                            MembersCount = 4,
                            Title = "Extreme Code C++",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7869)
                        },
                        new
                        {
                            Id = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            CommunityType = 4,
                            CreatedAt = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Extreme Code .NET Public Group",
                            Image = "extremecode_dotnet.png",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "6:45 PM",
                            MembersCount = 4,
                            Title = "Extreme Code .NET",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7873)
                        },
                        new
                        {
                            Id = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Khachatur Khachatryan and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "2.46 PM",
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / razumovsky r",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7877)
                        },
                        new
                        {
                            Id = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Мусяка Колбасяка and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "2.47 PM",
                            MembersCount = 2,
                            Title = "Мусяка Колбасяка / razumovsky r",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7881)
                        },
                        new
                        {
                            Id = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Amelit and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "2.49 PM",
                            MembersCount = 2,
                            Title = "Amelit / razumovsky r",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7885)
                        },
                        new
                        {
                            Id = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Khachatur Khachatryan and Мусяка Колбасяка",
                            LastMessageAuthor = "Khachatur Khachatryan",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "2.49 PM",
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / Мусяка Колбасяка",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7888)
                        },
                        new
                        {
                            Id = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct chat between Petro Kolosov and Szymon Murawski",
                            LastMessageAuthor = "Petro Kolosov",
                            LastMessageText = "Hello world!",
                            LastMessageTime = "2.49 PM",
                            MembersCount = 2,
                            Title = "Petro Kolosov / Szymon Murawski",
                            UpdatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 39, DateTimeKind.Utc).AddTicks(7892)
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.KeyExchangeRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderPublicKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KeyExchangeRequests");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InReplayToAuthor")
                        .HasColumnType("text");

                    b.Property<string>("InReplayToText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db45cff1-639c-4cad-97d1-4a489bbcada6"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hello guys, how your diploma project goes?",
                            CreatedAt = new DateTime(2021, 8, 11, 14, 48, 21, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("bd3cb295-226d-41ff-b4db-9f02e5a2d150"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Well, I'm doing UI/UX part of the project",
                            CreatedAt = new DateTime(2021, 8, 11, 14, 53, 2, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("bc6b0f53-488d-41a3-8658-9ef431d38d3c"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hi teacher, I perform QA of the current version",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 53, 35, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("adf675ca-424e-46de-97b0-11b42c3f73b9"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Greetings. I currently workout the back-end part",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 53, 57, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("3e713547-e8f8-4f5d-a3a7-8592be86d91b"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "I work with backend too...",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 55, 5, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("c802c75e-74dc-4c84-8960-e32f3555a1ff"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Great! Good luck to all of you",
                            CreatedAt = new DateTime(2021, 8, 11, 21, 59, 5, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("85a5c194-ae67-4c6b-b263-0fc3462b7c2b"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 13, 49, 21, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("eb36246d-3dcb-4688-89e0-4972c3c745cd"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "F# The Best",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 21, 56, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("3470177e-a80e-4b55-b910-76e04fd532e5"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "C# The Best",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 22, 12, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("cdfdd94a-5cd0-448b-9c9b-fe739bd9ab64"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "TypeScript The Best",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 32, 32, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("ed6ab332-8d37-4021-b062-8788be0c7365"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("2820f44f-8aa2-4b0e-8132-545631d2c5f1"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 36, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("33cfc504-71fd-4bb6-88b4-e918e8738f96"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 45, 13, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("43a13d1c-b769-4ba9-945d-a9a0148a87fe"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 45, 56, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("403e9259-3944-43fe-beba-c7f95179ca61"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("8274ba19-16fc-470b-95bc-7e8f61633c7b"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("f47b2cfe-33db-4a2a-84a9-25b14e5bedaf"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("14cbb329-bddb-48ea-add4-83f62e605c6e"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("ff9796c8-d44c-4d40-b190-ec1a1f641b6f"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("8b267a2a-c58f-4006-945d-73f6f8bc0dd9"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("96462076-bd67-42a1-8cbf-cb046bedef3c"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("2616e347-d311-4089-8b5b-676637036777"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("bb7291a6-b327-4cbb-a630-f4f0f4b10ae7"),
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("7f9eb08b-89b6-4b4e-ae6c-e83b18721608"),
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 46, 29, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("336421ba-f856-4d68-859f-a2cd968f4cae"),
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 44, 12, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("cf047504-152e-4295-b4cd-f0dfb6c0cf0c"),
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 44, 59, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("562b462a-7c1a-4394-80ee-4f3d75799a98"),
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("d54b1328-d72c-45ae-baab-a107912ecf93"),
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("4bea86ad-bf1b-4e94-ba15-9e292d4489fa"),
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("38f239d9-6d0e-478f-b2dd-bae84e1dcee8"),
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("53baebd2-1d0b-4130-96a2-2288c6428795"),
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            Content = "Hi teacher",
                            CreatedAt = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordRestoreRequests");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PublicKeyEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartnerPublicKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "PartnerId");

                    b.ToTable("PublicKeys");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32904a05-6d7c-43cf-b915-223324ff480e"),
                            ConcurrencyStamp = "3cb3c3df-107a-4347-b203-d7eacdb21f76",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("1c48f8d5-01ed-4e47-8377-a22ffa58c150"),
                            ConcurrencyStamp = "cdf8766e-7da0-4636-9458-c504395d51bb",
                            Name = "Unverified",
                            NormalizedName = "UNVERIFIED"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ec6da0c-e4ea-481e-ad56-c5b436c375c5"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 77, DateTimeKind.Utc).AddTicks(9962),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("f7a90f37-40f8-4d1a-8a0e-ea895426f498"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(499),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("f26ac781-36bb-42eb-affb-a1d7d996f3f3"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(506),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("fe529da1-9061-4a20-be3e-10ca00911e7b"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(511),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("008a199a-625f-42fe-83ac-95e8a2c39bff"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(515),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("04676e49-b444-4a6c-b4a6-96b504de05dd"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(519),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("c7d1eaf7-541a-463f-a0a0-029dd1132e6b"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(547),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("cb4b7894-a193-48d4-8f6a-1537cdc8e490"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(551),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("2d028f7a-923f-4339-88ea-77c839e0a0e7"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(556),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("4ed6568d-b76b-416c-9a38-94f584c066ee"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(560),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("0670f190-f366-48de-a75d-ed170eeb880f"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(565),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("61cee288-ed07-4e6b-b694-004912ecb38a"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(569),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("b2b783ba-d9ca-4fc3-b4f4-1cb94f7cbbc8"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(573),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("e2bf761f-4c44-46b8-b679-da36fe895a3a"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(577),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("1b628551-8160-488b-b12d-65411f9e1ba5"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(585),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("2e3348c7-e6e4-4852-9f77-889f4d4c1e05"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(589),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("114a8d92-3405-49d3-ba02-63667bd2fae3"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(594),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("132c3cae-400c-483a-bb1a-3a9fe9624c43"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(598),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("598d3a83-598c-422f-85ba-248c71394dc4"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(603),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("dc7a0916-641c-404c-b369-236b4a8a5223"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(608),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("24c60c1d-df5d-4b8d-845a-466e74493bca"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(614),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("7b53922d-fb63-4a00-a363-9fc83f8ecd4d"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(618),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("aa0a9ce0-0600-4541-bc6b-7f0510e67638"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(626),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("e5d53e68-c1be-46fa-927b-001636b8eb79"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(630),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("025aeb62-9049-44df-baa1-b8ec30d3cff2"),
                            ContactId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(635),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("22949ec3-f9cf-4bbc-9780-f11fdacfda17"),
                            ContactId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(639),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("d429688c-6777-49e7-9caa-b40be1ad8e2d"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(643),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("9320ce0f-d055-46a1-9bcf-e0be553bae4c"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2021, 12, 25, 15, 46, 36, 78, DateTimeKind.Utc).AddTicks(647),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("EmailCode")
                        .HasColumnType("uuid");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            AccessFailedCount = 0,
                            Bio = "13 y. o. | C# pozer, Hearts Of Iron IV noob",
                            ConcurrencyStamp = "3eb0341d-3300-4e9d-ad23-1606cbc603d7",
                            DisplayName = "Khachatur Khachatryan",
                            Email = "xachulxx@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "khachatur_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "XACHULXX@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELTfDoSBudHAjEgvgOorY32wc1+gumaxDTJIfWha0TbDwT7bRssKqI/JKIlWsjy0Dg==",
                            PhoneNumber = "374775554310",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "KHACHATUR228"
                        },
                        new
                        {
                            Id = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            AccessFailedCount = 0,
                            Bio = "11011 y.o Dotnet Developer from $\"{cityName}\"",
                            ConcurrencyStamp = "ce43764b-d415-472b-a572-538897ef17f3",
                            DisplayName = "razumovsky r",
                            Email = "kolosovp95@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLOSOVP94@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHYCZWtxdBd+y8N+QiO/76E7z+6VoWn1pEIUqu3IVT53rZPwGVrq1V7fUqgIqhX7DA==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "razumovsky_r"
                        },
                        new
                        {
                            Id = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            AccessFailedCount = 0,
                            Bio = "Колбасятор.",
                            ConcurrencyStamp = "38d37c6d-b892-4e93-aad6-f6f6faff040b",
                            DisplayName = "Мусяка Колбасяка",
                            Email = "kolbasator@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "musyaka_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLBASATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCSgJxYxN1zEjMXx91QxAtgUOS5wfhZ+qIRUYeeKrpIdOhlQISOrbPNyNkg1Umh4Q==",
                            PhoneNumber = "77017506265",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "kolbasator"
                        },
                        new
                        {
                            Id = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            AccessFailedCount = 0,
                            Bio = "Дипломат",
                            ConcurrencyStamp = "5e9f3e46-3376-4df1-8dee-2638bfd6c054",
                            DisplayName = "Amelit",
                            Email = "amelit@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "amelit_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELIT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3JbOS758ykNV3gUw6sVrIPcDq0dsmJonuIt3jYjmov/0ucNHYETX1uPV+PvfW5Ag==",
                            PhoneNumber = "12025550152",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "TheMoonlightSonata"
                        },
                        new
                        {
                            Id = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "3bef58d4-d72e-49d6-8364-f0af183a69c7",
                            DisplayName = "Petro Kolosov",
                            Email = "petro.kolosov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETRO.KOLOSOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAED0gA5Hu6wVN6fIwebcVp7uhUiufm/oGWDc2skJc5jxB1simI3vvUPgleiYmWm86nA==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "petro.kolosov"
                        },
                        new
                        {
                            Id = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            AccessFailedCount = 0,
                            Bio = "Teacher of Computer Science at WSB Poznan",
                            ConcurrencyStamp = "7fa1eac4-184f-4069-ae83-f80c32b164e2",
                            DisplayName = "Szymon Murawski",
                            Email = "szymon.murawski@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "szymon_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SZYMON.MURAWSKI@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAECSR9Ooq4p9SR1KsIosOPraPraLabX9avoh6tqluqSefcTZqS2PyKEQUTPVKnFE1sw==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "szymon.murawski"
                        },
                        new
                        {
                            Id = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "cd930b39-8931-46f7-84f6-1dbb9ff2d56d",
                            DisplayName = "Illia Zubachov",
                            Email = "illia.zubachov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "illia_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILLIA.ZUBACHOW@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAn1E4HJ91/9FPTcZJpXO9pYdoIR0dhQcSdrFm25xGuoxK31UZE9pOXMCVft/OWRDA==",
                            PhoneNumber = "48352643123",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "illia.zubachov"
                        },
                        new
                        {
                            Id = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "0a8d218f-0f96-4f49-a985-52415efa2294",
                            DisplayName = "Arslanbek Temirbekov",
                            Email = "arslanbek.temirbekov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "arslan_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSLANBEK.TEMIRBEKOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBBl8wWPIXvbFtB/2N6IHJn+SC0lpCU5r5nPxYCZvlJPNltOyWW6GuKfK5wUwt9KWw==",
                            PhoneNumber = "48278187781",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "arslanbek.temirbekov"
                        },
                        new
                        {
                            Id = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "dd9a6360-e6e5-4593-bbeb-846a037050c5",
                            DisplayName = "Serhii Holishevskii",
                            Email = "serhii.holishevskii@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "serhii_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERHII.HOLISHEVSKII@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEH1kWLbrL6dKn4e4n3+m6xK9UL5etoh48uOGHXyddjC24P5Y+Xr1Ke0KTFlRllRrkA==",
                            PhoneNumber = "48175481653",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "serhii.holishevskii"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0deb9439-0c6c-465c-baec-e4bbe0182693"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "petro.kolosov",
                            Instagram = "petro.kolosov",
                            LinkedIn = "petro.kolosov",
                            Twitter = "petro.kolosov",
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            Website = "petro.kolosov.com"
                        },
                        new
                        {
                            Id = new Guid("01e7cc28-e0cd-4c67-bd11-5c528495c854"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "illia.zubachov",
                            Instagram = "illia.zubachov",
                            LinkedIn = "illia.zubachov",
                            Twitter = "illia.zubachov",
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            Website = "illia.zubachov.com"
                        },
                        new
                        {
                            Id = new Guid("1fa9f9fb-65f1-47fb-9cf1-d3fd726c6f7c"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "serhii.holishevskii",
                            Instagram = "serhii.holishevskii",
                            LinkedIn = "serhii.holishevskii",
                            Twitter = "serhii.holishevskii",
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            Website = "serhii.holishevskii.com"
                        },
                        new
                        {
                            Id = new Guid("b99c6e5f-d1b9-4e76-8282-e75aca44880f"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "arslan.temirbekov",
                            Instagram = "arslan.temirbekov",
                            LinkedIn = "arslan.temirbekov",
                            Twitter = "arslan.temirbekov",
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            Website = "arslan.temirbekov.com"
                        },
                        new
                        {
                            Id = new Guid("4a081e43-5cd3-4503-9eec-f6bc97ef2f46"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "szymon.murawski",
                            Instagram = "szymon.murawski",
                            LinkedIn = "szymon.murawski",
                            Twitter = "szymon.murawski",
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            Website = "szymon.murawski.com"
                        },
                        new
                        {
                            Id = new Guid("7e1b30f8-3f58-46fe-943a-e8cf9a91530c"),
                            Address = "Moscow, Russia",
                            BirthDay = new DateTime(2008, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Instagram = "khachapur.mudrenych",
                            LinkedIn = "khachapur.mudrenych",
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            Website = "khachapur.com"
                        },
                        new
                        {
                            Id = new Guid("bded641f-24ee-42aa-81ec-689aee9f9ff2"),
                            Address = "Odessa, Ukraine",
                            BirthDay = new DateTime(1994, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "razumovsky_r",
                            Instagram = "razumovsky_r",
                            LinkedIn = "razumovsky_r",
                            Twitter = "razumovsky_r",
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            Website = "razumovsky.com"
                        },
                        new
                        {
                            Id = new Guid("722a213f-a24e-4fd4-98ae-b535f218b31f"),
                            Address = "Saint-Petersburg, Russia",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "kolbasator",
                            ProfilePicture = "profile.png",
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            Website = "kolbasator.com"
                        },
                        new
                        {
                            Id = new Guid("cf1016bb-f700-4cac-ac98-04380c5e3de0"),
                            Address = "Moscow, Russia",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Facebook = "TheMoonlightSonata",
                            Instagram = "TheMoonlightSonata",
                            Twitter = "TheMoonlightSonata",
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        },
                        new
                        {
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            RoleId = new Guid("32904a05-6d7c-43cf-b915-223324ff480e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.KeyExchangeRequestEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("KeyExchangeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("PasswordRestoreRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PublicKeyEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("PublicKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MangoAPI.Domain.Entities.UserInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("KeyExchangeRequests");

                    b.Navigation("Messages");

                    b.Navigation("PasswordRestoreRequests");

                    b.Navigation("PublicKeys");

                    b.Navigation("Sessions");

                    b.Navigation("UserChats");

                    b.Navigation("UserInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
