// <auto-generated />
using System;
using MangoAPI.DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MangoAPI.DataAccess.Migrations
{
    [DbContext(typeof(MangoPostgresDbContext))]
    [Migration("20210820115117_ContactsUpdated")]
    partial class ContactsUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ChatType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            ChatType = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 5,
                            Title = "WSB"
                        },
                        new
                        {
                            Id = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            ChatType = 3,
                            Created = new DateTime(2020, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code Main"
                        },
                        new
                        {
                            Id = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            ChatType = 3,
                            Created = new DateTime(2020, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code Flood"
                        },
                        new
                        {
                            Id = "cd358b94-c3b9-4022-923a-13f787f70055",
                            ChatType = 3,
                            Created = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code C++"
                        },
                        new
                        {
                            Id = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            ChatType = 3,
                            Created = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code .NET"
                        },
                        new
                        {
                            Id = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / razumovsky r"
                        },
                        new
                        {
                            Id = "f8729a12-5746-443f-ad31-378d846fce30",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Мусяка Колбасяка / razumovsky r"
                        },
                        new
                        {
                            Id = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Amelit / razumovsky r"
                        },
                        new
                        {
                            Id = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / Мусяка Колбасяка"
                        },
                        new
                        {
                            Id = "3fce8b2c-252d-4514-a1bb-fbdf73c47b78",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Petro Kolosov / Szymon Murawski"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "e8f26f7a-fc72-4925-b528-dbc8326b3476",
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            Content = "Hello guys, how your diploma project goes?",
                            Created = new DateTime(2021, 8, 11, 14, 48, 21, 0, DateTimeKind.Unspecified),
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "e1918784-455a-42c7-998e-d0b94380c21f",
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            Content = "Well, I'm doing UI/UX part of the project",
                            Created = new DateTime(2021, 8, 11, 14, 53, 2, 0, DateTimeKind.Unspecified),
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"
                        },
                        new
                        {
                            Id = "5aca4139-5251-4e94-a6b1-459ebf80b3ee",
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            Content = "Hi teacher, I perform QA of the current version",
                            Created = new DateTime(2021, 8, 11, 21, 53, 35, 0, DateTimeKind.Unspecified),
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c"
                        },
                        new
                        {
                            Id = "a9e3d66a-9e19-4bd2-bf09-d02fe4540fdf",
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            Content = "Greetings. I currently workout the back-end part",
                            Created = new DateTime(2021, 8, 11, 21, 53, 57, 0, DateTimeKind.Unspecified),
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        },
                        new
                        {
                            Id = "1dc37267-8f45-491b-9f43-d78421e79575",
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            Content = "I work with backend too...",
                            Created = new DateTime(2021, 8, 11, 21, 55, 5, 0, DateTimeKind.Unspecified),
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7"
                        },
                        new
                        {
                            Id = "e8f26f7a-fc72-4925-b528-dbc8326b3477",
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            Content = "Great! Good luck to all of you",
                            Created = new DateTime(2021, 8, 11, 21, 59, 5, 0, DateTimeKind.Unspecified),
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "bb431cae-3df2-4c5b-9b63-cff0b74ff0d1",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 13, 49, 21, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "0c9466df-1ea2-48b8-a9f5-d5d9bd57be15",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "F# The Best",
                            Created = new DateTime(2021, 8, 1, 14, 21, 56, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "05597aa2a-4f7a-4d6d-8fdc-5d91dfce6101",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "C# The Best",
                            Created = new DateTime(2021, 8, 1, 14, 22, 12, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "d6fe2012-3a5e-4b36-baa8-eec4ba6a87f2",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "TypeScript The Best",
                            Created = new DateTime(2021, 8, 1, 14, 32, 32, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "8c0f730d-6b36-4071-bac9-08a5db5a54bd",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "cded3336-015b-4b33-a0d2-66b5c06a97bf",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 43, 36, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "83b3fe85-aa37-4692-b561-aa29c1c7b448",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 45, 13, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "af2b6605-7b5b-4151-abb6-dc7a28138215",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 45, 56, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "33ac80b1-0d3e-46cd-8175-e6e02350296e",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "644efffa-b05c-4f12-9b51-19fd098835a5",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "7d525aac-81d3-4001-b1d3-373e449cbfa8",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "0f9e236f-f68b-48b7-a330-eb8079277b9e",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "dd870cc5-0acd-4dfd-9f76-e60504a6df7f",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "920a773e-828f-4cfe-9c05-5912a942eaa6",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "b75ff619-8a7c-4b7d-837d-c8e46bd4579e",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "6689401f-cb3e-484c-a3e9-a12f551b5e38",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "6d49b347-c544-4d57-8f06-cf1d6994cdd0",
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "462209ae-c7a1-4021-8e55-1dd84b0cc86d",
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 46, 29, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "e5626507-b84d-4850-914c-a2ac8ae8d2d1",
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 44, 12, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "c6552cd3-60a9-41b8-822a-57e07c84d805",
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 44, 59, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "d8792fca-23df-4ae1-b83a-8a9aa5cc827a",
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "fbe0857c-dc77-44c7-9b3b-799a17e0869a",
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "c1d5d83c-447f-4320-8894-d5266090a9f5",
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "c4635d82-0703-4fe6-8836-be849482ec88",
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "c4635d82-0703-4fe6-8836-be849482ec89",
                            ChatId = "3fce8b2c-252d-4514-a1bb-fbdf73c47b78",
                            Content = "Hi teacher",
                            Created = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "b6ca4533-fc21-4f44-9747-687361e3031c",
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "3fce8b2c-252d-4514-a1bb-fbdf73c47b78",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "3fce8b2c-252d-4514-a1bb-fbdf73c47b78",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ContactId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");

                    b.HasData(
                        new
                        {
                            Id = "3d69d8fc-fffd-4b6e-9978-84d8425340c4",
                            ContactId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        },
                        new
                        {
                            Id = "6b3371b8-5a2d-4461-94ef-8fd499ba1d64",
                            ContactId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        },
                        new
                        {
                            Id = "87badcbf-6e65-4fc2-8eb5-4e840c6527e1",
                            ContactId = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        },
                        new
                        {
                            Id = "d4e95646-707b-41f6-8e5f-d61623dd9bc4",
                            ContactId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        },
                        new
                        {
                            Id = "fa0622ae-3718-46a9-9a86-4cd3afbbb06e",
                            ContactId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "c1c56d69-7ed6-4c11-b4d9-5eaf52e6afa5",
                            ContactId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "e4141cf8-b54c-4805-a9e6-f1d80ecc26da",
                            ContactId = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "365ba3a3-4076-480d-bcf2-ee1ae2e2dfa7",
                            ContactId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "45ee4a8c-f080-4019-af9d-54675aee33b6",
                            ContactId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"
                        },
                        new
                        {
                            Id = "c588c126-474a-4e99-9881-3dbf27615326",
                            ContactId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"
                        },
                        new
                        {
                            Id = "79880f5e-0d7a-4c45-a85a-7ab11c38ad8e",
                            ContactId = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"
                        },
                        new
                        {
                            Id = "f8845244-d31b-49d4-a90c-01d56955217b",
                            ContactId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"
                        },
                        new
                        {
                            Id = "4b00417a-a7f2-4db5-8428-a62369398875",
                            ContactId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7"
                        },
                        new
                        {
                            Id = "64992406-0256-42d5-8fcf-e95167e9e2e1",
                            ContactId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7"
                        },
                        new
                        {
                            Id = "36bca0d0-a95e-4e9f-8af1-fbeb37a6b1ee",
                            ContactId = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7"
                        },
                        new
                        {
                            Id = "e9759e0b-f7c0-4de0-bbfb-df353aed6492",
                            ContactId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7"
                        },
                        new
                        {
                            Id = "9c1c1e15-18e8-4a36-b577-a48e534b4328",
                            ContactId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c"
                        },
                        new
                        {
                            Id = "9b678811-b365-41ef-85ee-ffffc1b848c8",
                            ContactId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c"
                        },
                        new
                        {
                            Id = "13716e59-9a96-40ae-8dc7-6a7e61282711",
                            ContactId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c"
                        },
                        new
                        {
                            Id = "c9ac19e1-f5d2-4544-b255-0b75fe145162",
                            ContactId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c"
                        },
                        new
                        {
                            Id = "2f71da07-8dac-4a31-b09e-82940d42e79d",
                            ContactId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "950750fc-91af-4bdc-b9cb-46c8b0fd5073",
                            ContactId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "f11d2294-1db9-41f0-8a40-601800967889",
                            ContactId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "14b62bb7-bacd-457c-8b2b-c9effc83d838",
                            ContactId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("ConfirmationCode")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            AccessFailedCount = 0,
                            Bio = "13 y. o. | C# pozer",
                            ConcurrencyStamp = "1de1af90-04f5-4152-8780-195384f92175",
                            DisplayName = "Khachatur Khachatryan",
                            Email = "xachulxx@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "XACHULXX@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEONCe9pWzfUwW8SATNZVkQa96mOzidsfCFBORrj4HA8ADJBc6/ZLw+Y2D/MUuoi06w==",
                            PhoneNumber = "+374 775 55 43 10",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dfe77308-0e2e-4f08-b563-b42a0adccbd0",
                            TwoFactorEnabled = false,
                            UserName = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            AccessFailedCount = 0,
                            Bio = "11011 y.o Dotnet Developer from $\"{cityName}\"",
                            ConcurrencyStamp = "adbbe243-926f-4c8e-ba74-9058ac2b50be",
                            DisplayName = "razumovsky r",
                            Email = "kolosovp95@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLOSOVP94@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGanPeN3/StqPhJ6byio8U+Q3q9f3ntE/fiwWPmlRPDE9x4WTJIvcbVjT8yfMcacAA==",
                            PhoneNumber = "+48 743 615 532",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e193ab7d-8169-4013-adaa-4779bae44ea3",
                            TwoFactorEnabled = false,
                            UserName = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            AccessFailedCount = 0,
                            Bio = "Колбасятор.",
                            ConcurrencyStamp = "c904b57a-d583-4051-aede-8a9cb49563e8",
                            DisplayName = "Мусяка Колбасяка",
                            Email = "kolbasator@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLBASATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO85rPFF7z/cQpGdvnl4rt3cBOQSMFfVgH/6woFxQnJI6f9LpeRdPOmKTSHxFmxstA==",
                            PhoneNumber = "+7 701 750 62 65",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "eff904fc-6824-41b8-85cf-9ffaa7a6cab5",
                            TwoFactorEnabled = false,
                            UserName = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            AccessFailedCount = 0,
                            Bio = "Дипломат",
                            ConcurrencyStamp = "aeb0024b-1323-4689-b826-2ffa3c73f4a2",
                            DisplayName = "Amelit",
                            Email = "amelit@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELIT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7zNmOu5B6O2zp4+6Y9sFzr6QdL6t1mN9QfwOUJyJ0OII783i9MXRBAtA0N85+Dlg==",
                            PhoneNumber = "+1 202 555 0152",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "68eaa4b1-7022-4b25-a3d5-05537c4b7a8b",
                            TwoFactorEnabled = false,
                            UserName = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bba9005f-3df7-4959-9965-0cfe8c63de8a",
                            DisplayName = "Petro Kolosov",
                            Email = "petro.kolosov@wp.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETRO.KOLOSOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFMQ5muu7X3vYKDKTvvHrpxTZxYGzRhlumYnXvCzlA5CHtRxXusKGRKVFRf2Nb7tOQ==",
                            PhoneNumber = "+48 743 615 532",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d3307747-4379-43ef-942b-b1384d12ccca",
                            TwoFactorEnabled = false,
                            UserName = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4"
                        },
                        new
                        {
                            Id = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d2627a9-7a35-4423-a659-969518f4d1bb",
                            DisplayName = "Szymon Murawski",
                            Email = "szymon.murawski@wp.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SZYMON.MURAWSKI@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+HbUxafglE0tTTwKCCYf6KFHOgpdebZQjH4FsuLCRUHNzZvZmej8W3VSHWWEBuaQ==",
                            PhoneNumber = "+48 743 615 532",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "02df928a-58db-4494-94af-673461620b8f",
                            TwoFactorEnabled = false,
                            UserName = "5e7274ad-3132-4ad7-be36-38778a8f7b1c"
                        },
                        new
                        {
                            Id = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65e30a8b-5ebd-4be4-99a2-a470f0899d85",
                            DisplayName = "Illia Zubachov",
                            Email = "illia.zubachov@wp.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ILLIA.ZUBACHOW@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAENBE/IArdHP6oZawV6NZgQXSSpqG2j4eWxh6eQNMPlc78Ckg4stEN/2kyLbKHDl8Xw==",
                            PhoneNumber = "+48 352 643 123",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3305a893-7d49-4ce6-a0e7-b7381e427835",
                            TwoFactorEnabled = false,
                            UserName = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"
                        },
                        new
                        {
                            Id = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "384001df-2688-40ec-92ca-a877aaacbe90",
                            DisplayName = "Arslanbek Temirbekov",
                            Email = "arslanbek.temirbekov@wp.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSLANBEK.TEMIRBEKOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGIKtoFSuLQzrcCVcF433GLio73Z2LaMME03aEGd9Hz+RNDRI0yc042ijb0/B1BwBQ==",
                            PhoneNumber = "+48 278 187 781",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "27d95c9e-20ee-4161-bf5c-d912d8a96cf7",
                            TwoFactorEnabled = false,
                            UserName = "56d6294f-7b80-4a78-856a-92b141de2d1c"
                        },
                        new
                        {
                            Id = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35f93d10-742b-4e50-b31e-a0728fa097b1",
                            DisplayName = "Serhii Holishevskii",
                            Email = "serhii.holishevskii@wp.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERHII.HOLISHEVSKII@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFj/BEvDpB8JfFedXPhijtl+faKu+TtEsP/on4LRjjoOfCVpoxnzXNvUrrKOB0+oiA==",
                            PhoneNumber = "+48 175 481 653",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3bda552d-16e6-4bf5-abbb-909c3e25ca69",
                            TwoFactorEnabled = false,
                            UserName = "d1ae1de1-1aa8-4650-937c-4ed882038ad7"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformation");

                    b.HasData(
                        new
                        {
                            Id = "e44583f1-62ca-4ca4-a6a2-3fc1a874ab0c",
                            BirthDay = new DateTime(1994, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Petro",
                            Instagram = "petro.kolosov",
                            LastName = "Kolosov",
                            LinkedIn = "petro.kolosov",
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            Website = "pkolosov.com"
                        },
                        new
                        {
                            Id = "f773c1da-c7d5-44e9-9a1a-04e1be0b4b55",
                            BirthDay = new DateTime(1983, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Szymon",
                            Instagram = "szymon.murawski",
                            LastName = "Murawski",
                            LinkedIn = "szymon.murawski",
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            Website = "murawski.com"
                        },
                        new
                        {
                            Id = "3067c801-da6d-4b03-ac5e-ad3fa0db5acf",
                            BirthDay = new DateTime(2008, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Khachatur",
                            Instagram = "khachapur.mudrenych",
                            LastName = "Khachatryan",
                            LinkedIn = "khachapur.mudrenych",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            Website = "khachapur.com"
                        },
                        new
                        {
                            Id = "11da38d9-13e2-4056-80a7-a8a76b1c0682",
                            Address = "Poland, Krakov",
                            BirthDay = new DateTime(1994, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "razumovsky",
                            LastName = "r",
                            Twitter = "razumovsky_r",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            Website = "razumovsky.com"
                        },
                        new
                        {
                            Id = "91d1d13e-e475-4f77-820a-0225c37035a4",
                            Facebook = "kolbasator",
                            FirstName = "Мусяка",
                            LastName = "Колбасяка",
                            ProfilePicture = "profile.png",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            Website = "kolbasator.com"
                        },
                        new
                        {
                            Id = "f3fbbce4-b451-4d2b-bfb4-662a9c87c315",
                            Facebook = "TheMoonlightSonata",
                            FirstName = "Amelit",
                            Instagram = "TheMoonlightSonata",
                            Twitter = "TheMoonlightSonata",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "32904a05-6d7c-43cf-b915-223324ff480e",
                            ConcurrencyStamp = "bf9038c5-23b4-4a7f-8983-cbff13b5f065",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "1c48f8d5-01ed-4e47-8377-a22ffa58c150",
                            ConcurrencyStamp = "67bd1c1b-fa91-4d6e-b6ed-13e36a7a3425",
                            Name = "Unverified",
                            NormalizedName = "UNVERIFIED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "2cd4b9a0-f70d-476d-a3cc-908da43f93c4",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "5e7274ad-3132-4ad7-be36-38778a8f7b1c",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "56d6294f-7b80-4a78-856a-92b141de2d1c",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        },
                        new
                        {
                            UserId = "d1ae1de1-1aa8-4650-937c-4ed882038ad7",
                            RoleId = "32904a05-6d7c-43cf-b915-223324ff480e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MangoAPI.Domain.Entities.UserInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Messages");

                    b.Navigation("Sessions");

                    b.Navigation("UserChats");

                    b.Navigation("UserInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
