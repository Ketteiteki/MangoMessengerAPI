// <auto-generated />
using System;
using MangoAPI.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangoAPI.DataAccess.Migrations
{
    [DbContext(typeof(MangoDbContext))]
    [Migration("20220611213906_OpenSslKeyExchangeSchemaUpdate")]
    partial class OpenSslKeyExchangeSchemaUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommunityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastMessageAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastMessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMessageTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ChatEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6937),
                            Description = "WSB Public Group",
                            Image = "wsb_group_logo.png",
                            LastMessageAuthor = "Szymon Murawski",
                            LastMessageText = "Great! Good luck to all of you",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6940),
                            MembersCount = 5,
                            Title = "WSB",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6938)
                        },
                        new
                        {
                            Id = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6942),
                            Description = "Extreme Code Main Public Group",
                            Image = "extreme_code_main.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "TypeScript The Best",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6943),
                            MembersCount = 4,
                            Title = "Extreme Code Main",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6942)
                        },
                        new
                        {
                            Id = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6944),
                            Description = "Extreme Code Flood Public Group",
                            Image = "extremecode_rest_logo.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Слава Партии!!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6945),
                            MembersCount = 4,
                            Title = "Extreme Code Flood",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6945)
                        },
                        new
                        {
                            Id = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6946),
                            Description = "Extreme Code C++ Public Group",
                            Image = "extremecode_cpp_logo.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6947),
                            MembersCount = 4,
                            Title = "Extreme Code C++",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6947)
                        },
                        new
                        {
                            Id = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6948),
                            Description = "Extreme Code .NET Public Group",
                            Image = "extremecode_dotnet.png",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6949),
                            MembersCount = 4,
                            Title = "Extreme Code .NET",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6949)
                        },
                        new
                        {
                            Id = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6954),
                            Description = "Direct chat between Khachatur Khachatryan and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6955),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / razumovsky r",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6955)
                        },
                        new
                        {
                            Id = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6956),
                            Description = "Direct chat between Мусяка Колбасяка and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6957),
                            MembersCount = 2,
                            Title = "Мусяка Колбасяка / razumovsky r",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6956)
                        },
                        new
                        {
                            Id = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6957),
                            Description = "Direct chat between Amelit and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6958),
                            MembersCount = 2,
                            Title = "Amelit / razumovsky r",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6958)
                        },
                        new
                        {
                            Id = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6959),
                            Description = "Direct chat between Khachatur Khachatryan and Мусяка Колбасяка",
                            LastMessageAuthor = "Khachatur Khachatryan",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6960),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / Мусяка Колбасяка",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6959)
                        },
                        new
                        {
                            Id = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6961),
                            Description = "Direct chat between Petro Kolosov and Szymon Murawski",
                            LastMessageAuthor = "Petro Kolosov",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6962),
                            MembersCount = 2,
                            Title = "Petro Kolosov / Szymon Murawski",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 4, DateTimeKind.Utc).AddTicks(6961)
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.CngKeyExchangeRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderPublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CngKeyExchangeRequestEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.CngPublicKeyEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartnerPublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "PartnerId");

                    b.ToTable("CngPublicKeyEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InReplayToAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InReplayToText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21d0d1d3-1406-4314-a0b9-374195a82337"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hello guys, how your diploma project goes?",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(760),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("1ddf95d2-d33b-4e4c-b447-0da6192d758f"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Well, I'm doing UI/UX part of the project",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(762),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("2433ebc1-85f1-4c94-8da3-02d27b010ee3"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hi teacher, I perform QA of the current version",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(763),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("a2496dfa-b769-4383-91bc-764f649eaec7"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Greetings. I currently workout the back-end part",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(764),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("c8181ee6-374e-49ca-935d-f5d5afa23fd4"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "I work with backend too...",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(765),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("16c3e1b7-ca2c-4f98-9a07-64af4b28293c"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Great! Good luck to all of you",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(766),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("cf69516a-ca05-4e63-b0ce-a41d165c4cd0"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(780),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("c1b31795-570c-48b8-831a-0d650a7d17dc"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "F# The Best",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(781),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("f6e2fcbc-2492-4f13-ad01-32c6413bd385"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "C# The Best",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(785),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("1bd5f8bc-7f2e-4894-8063-2c6f3e064265"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "TypeScript The Best",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(786),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("5f3af4f6-ba7a-4bd3-a614-a46d00bdf921"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(786),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("38d8788f-2cab-4203-b05d-1d0b2053d0b3"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(787),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("2a2e5b7d-9839-411e-9b37-78123e8bd721"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(788),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("29426ba0-067d-44cb-ab6e-8276b9a95900"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(789),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("9d5e5407-489a-4054-a70b-fd30d7f2d0c9"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(793),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("7826c679-98c9-46d2-904c-0725c7c98b37"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(794),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("7dd99225-c15f-4485-82d5-a7ad1b8f7b1b"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(795),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("b6492ddf-52a0-42d0-abd9-bcdb12ec25d1"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(795),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("785c783f-f6d1-4dbb-ac4e-585744acf18d"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(796),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("1f02f4c4-690f-4480-937f-5790bfdaf70e"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(797),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("a10aca35-a412-4d1a-9fc4-bbfaf26abb97"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(798),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("1d68c06b-cc19-4e9f-ab73-996144663d0d"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(799),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("b8ff744c-542f-4e9a-894c-018598f6224c"),
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(801),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("52d46e33-cf3b-40df-85c1-cd4cca37a845"),
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(802),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("a9017e61-f8ce-4f71-af85-0a4938b196cf"),
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(803),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("912419ae-461b-435a-b9ef-dab5bfb059a7"),
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(804),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("d854df5e-9853-4e80-b39d-70d46e5d3487"),
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(805),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("2b899002-ddaa-457a-8bea-d3d3bd5e6d39"),
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(806),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("3b8608be-c543-4ee2-8223-809808c3363f"),
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(807),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("272dcd4d-b10e-4b67-9ea9-e55111b9e68a"),
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(808),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("25ef4d9f-5103-49a9-a0a7-aa8546d448c8"),
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            Content = "Hi teacher",
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(810),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.OpenSslDhParameterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("OpenSslDhParameter")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("OpenSslDhParameterEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.OpenSslKeyExchangeRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("KeyExchangeType")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ReceiverPublicKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("SenderPublicKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OpenSslKeyExchangeRequestEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordRestoreRequestEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChatEntity", "mango");

                    b.HasData(
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6a628da-74f4-4fb6-981c-29913d2db23d"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6863),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("93964e9c-4971-4093-b903-ee44e02baf13"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6864),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("3b8d7545-5c79-4b4f-96d9-1a8bdad05b7e"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6865),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("22e21c63-8fec-48a9-8adf-ecd16c703920"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6866),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("7a7d677e-5931-47cb-8739-eec792a848de"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6867),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("83a32af5-4955-4b93-80aa-c36f59a9d6af"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6868),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("0590f188-2d09-4d17-a0ed-c7474df6578b"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6869),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("11728f2b-fb58-4b00-a41b-bfe44f30f990"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6875),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("a402d8df-2475-417d-b653-38cf6f161d36"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6876),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("96c37b19-5a11-406d-91d9-9ebca9c4042e"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6877),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("bc2e10a6-42d7-4b73-a9d6-c049d5b21d84"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6878),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("e09d316c-4c24-4d26-b933-b8c54c64782a"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6880),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("c1e0f322-58b6-496d-9cb3-1d1543745fba"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6881),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("aa06f642-3c1a-439b-b5d9-5ded2ec56c9f"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6882),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("3cb3011c-f07e-4283-a935-3cd173a5f5bc"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6883),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("d76cdef8-a8df-4b1f-b3de-93556a17ec29"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6885),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("c902e6b0-9616-4bdb-b16a-9873cf8f1fc6"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6886),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("b1d05578-fd73-417d-b6f6-0b5495893b3e"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6887),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("6a0b1970-d556-4287-bb98-f68162faf005"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6888),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("bf906fe8-fb57-4295-9223-63eadd10f01e"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6889),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("4c5dd47b-8d5e-4bc3-bcd2-c1bf99869728"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6889),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("93488128-5147-45a3-81a9-6ad7e386afdf"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6890),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("bf9bdfee-08a5-4c4d-8b96-37162d9a136d"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6891),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("bc609be0-c1ac-43ac-a577-567bef44a00e"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6894),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("c4975222-bba6-483c-996a-da9c360d58e7"),
                            ContactId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6894),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("c71cfc06-786d-427f-8ca4-4a0f7aae3476"),
                            ContactId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6895),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("2e336091-aa60-4dbc-bda3-0410ae589394"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6896),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("c11d6353-0e07-49c4-a380-11ee1ef26494"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 5, DateTimeKind.Utc).AddTicks(6897),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("EmailCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("UserEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            AccessFailedCount = 0,
                            Bio = "13 y. o. | C# pozer, Hearts Of Iron IV noob",
                            ConcurrencyStamp = "b78ff2eb-0bea-44ed-843f-eea83df7d0a3",
                            DisplayName = "Khachatur Khachatryan",
                            Email = "xachulxx@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "khachatur_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "XACHULXX@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMpAgPaa6OEdEL8y79gfXE4PlMWKZcTJ/CAN+aT/Td9LX2xxkIAPeGeWr7MK3C7MKQ==",
                            PhoneNumber = "374775554310",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "KHACHATUR228"
                        },
                        new
                        {
                            Id = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            AccessFailedCount = 0,
                            Bio = "11011 y.o Dotnet Developer from $\"{cityName}\"",
                            ConcurrencyStamp = "7f6e496f-63a8-4fc4-b196-05f5e56a5652",
                            DisplayName = "razumovsky r",
                            Email = "kolosovp95@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLOSOVP94@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOBcG/EiIiI/sXxc3jLvd57DX7kxG/75F2u8lupSCSqWUjujLctxNzCqsb/zimJpQ==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "razumovsky_r"
                        },
                        new
                        {
                            Id = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            AccessFailedCount = 0,
                            Bio = "Колбасятор.",
                            ConcurrencyStamp = "8a04acd9-5474-4ab8-9305-606160234757",
                            DisplayName = "Мусяка Колбасяка",
                            Email = "kolbasator@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "musyaka_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLBASATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOSv2h08HLuciwLLNl+ZPLsOvNcgpwXmWwf8Mu/dmVFjBruH/TpqwRrXE5/nbBh5AQ==",
                            PhoneNumber = "77017506265",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "kolbasator"
                        },
                        new
                        {
                            Id = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            AccessFailedCount = 0,
                            Bio = "Дипломат",
                            ConcurrencyStamp = "0ee5167c-71bd-48eb-9aa0-7a9e819d3f7a",
                            DisplayName = "Amelit",
                            Email = "amelit@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "amelit_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELIT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEogGoZUD4FJpcw0wVTecuCh2YeyLibDNPaozZS6A8++E3Wwco/e6nXbmpKnRM38Qg==",
                            PhoneNumber = "12025550152",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "TheMoonlightSonata"
                        },
                        new
                        {
                            Id = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "c55db0bc-e402-4e45-8b0c-1623642a900d",
                            DisplayName = "Petro Kolosov",
                            Email = "petro.kolosov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETRO.KOLOSOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7nPT145ukFw8nIHoBpjvDrHM7bZt5FttsRPGEejhcQdqZy71jSw3JLV/fYoCfmzg==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "petro.kolosov"
                        },
                        new
                        {
                            Id = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            AccessFailedCount = 0,
                            Bio = "Teacher of Computer Science at WSB Poznan",
                            ConcurrencyStamp = "29695945-51db-4344-b375-ff9c128b2dd8",
                            DisplayName = "Szymon Murawski",
                            Email = "szymon.murawski@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "szymon_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SZYMON.MURAWSKI@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHYtnFhQcc2b7Zvr/LZX3KnCjWj+fg2bxnG1dp7Xz+3Y9Lg+2vW+NTdzBlSH3rcc7g==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "szymon.murawski"
                        },
                        new
                        {
                            Id = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "f1b3dc39-f940-4aca-bc41-e790f08853d8",
                            DisplayName = "Illia Zubachov",
                            Email = "illia.zubachov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "illia_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILLIA.ZUBACHOW@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFKLIPo+A6XmqditRPqkeYw/ah9K5pvbAuXG0fBDYMPcwLQU9DtGgfiLBWwbD+FGcg==",
                            PhoneNumber = "48352643123",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "illia.zubachov"
                        },
                        new
                        {
                            Id = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "b2e80615-a4f0-4628-80c7-4b5c4e1eee46",
                            DisplayName = "Arslanbek Temirbekov",
                            Email = "arslanbek.temirbekov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "arslan_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSLANBEK.TEMIRBEKOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFE5NVbKj8brmYjrjDIxy+8B0salCQLgtllIPAVUYy3N6QCpNGSgTRkl5bOxIlppug==",
                            PhoneNumber = "48278187781",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "arslanbek.temirbekov"
                        },
                        new
                        {
                            Id = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "111ca6e5-9331-490d-9a68-19808e8648a5",
                            DisplayName = "Serhii Holishevskii",
                            Email = "serhii.holishevskii@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "serhii_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERHII.HOLISHEVSKII@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYNVeyxrGoM9SD2cn6sFeo+3gGdPrk5Iur45yW+vt2D6ZbYqvHovxCQTP+QlwRX7g==",
                            PhoneNumber = "48175481653",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "serhii.holishevskii"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformationEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c86a5756-f462-41a2-af3c-e4f51b7fe8b0"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9597),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9599),
                            Facebook = "petro.kolosov",
                            Instagram = "petro.kolosov",
                            LinkedIn = "petro.kolosov",
                            Twitter = "petro.kolosov",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9599),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            Website = "petro.kolosov.com"
                        },
                        new
                        {
                            Id = new Guid("b0a02654-5602-4dd2-925b-2a1e86188dcc"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9605),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9606),
                            Facebook = "illia.zubachov",
                            Instagram = "illia.zubachov",
                            LinkedIn = "illia.zubachov",
                            Twitter = "illia.zubachov",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9606),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            Website = "illia.zubachov.com"
                        },
                        new
                        {
                            Id = new Guid("055574b2-18fd-4659-9707-20d1945b2f63"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9608),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9609),
                            Facebook = "serhii.holishevskii",
                            Instagram = "serhii.holishevskii",
                            LinkedIn = "serhii.holishevskii",
                            Twitter = "serhii.holishevskii",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9609),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            Website = "serhii.holishevskii.com"
                        },
                        new
                        {
                            Id = new Guid("14574489-b9dd-479a-9cb2-6fd99130914a"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9610),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9611),
                            Facebook = "arslan.temirbekov",
                            Instagram = "arslan.temirbekov",
                            LinkedIn = "arslan.temirbekov",
                            Twitter = "arslan.temirbekov",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9611),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            Website = "arslan.temirbekov.com"
                        },
                        new
                        {
                            Id = new Guid("16dd0774-177e-443a-b121-e478a24b0346"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9613),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9614),
                            Facebook = "szymon.murawski",
                            Instagram = "szymon.murawski",
                            LinkedIn = "szymon.murawski",
                            Twitter = "szymon.murawski",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9613),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            Website = "szymon.murawski.com"
                        },
                        new
                        {
                            Id = new Guid("66b8cf07-8e69-4483-88c4-a8d2698b554e"),
                            Address = "Moscow, Russia",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9615),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9616),
                            Instagram = "khachapur.mudrenych",
                            LinkedIn = "khachapur.mudrenych",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9615),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            Website = "khachapur.com"
                        },
                        new
                        {
                            Id = new Guid("fa2463bc-1d68-4892-aaeb-2a194f29ede1"),
                            Address = "Odessa, Ukraine",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9617),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9618),
                            Facebook = "razumovsky_r",
                            Instagram = "razumovsky_r",
                            LinkedIn = "razumovsky_r",
                            Twitter = "razumovsky_r",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9617),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            Website = "razumovsky.com"
                        },
                        new
                        {
                            Id = new Guid("960e604a-3430-40c9-86e2-2cb808323575"),
                            Address = "Saint-Petersburg, Russia",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9619),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9620),
                            Facebook = "kolbasator",
                            ProfilePicture = "profile.png",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9619),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            Website = "kolbasator.com"
                        },
                        new
                        {
                            Id = new Guid("886dc387-73a0-4dc6-b10c-9462329abc6c"),
                            Address = "Moscow, Russia",
                            BirthDay = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9621),
                            CreatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9622),
                            Facebook = "TheMoonlightSonata",
                            Instagram = "TheMoonlightSonata",
                            Twitter = "TheMoonlightSonata",
                            UpdatedAt = new DateTime(2022, 6, 11, 21, 39, 6, 14, DateTimeKind.Utc).AddTicks(9621),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.CngKeyExchangeRequestEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("KeyExchangeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.CngPublicKeyEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("PublicKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DocumentEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("PasswordRestoreRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MangoAPI.Domain.Entities.UserInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Documents");

                    b.Navigation("KeyExchangeRequests");

                    b.Navigation("Messages");

                    b.Navigation("PasswordRestoreRequests");

                    b.Navigation("PublicKeys");

                    b.Navigation("Sessions");

                    b.Navigation("UserChats");

                    b.Navigation("UserInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
