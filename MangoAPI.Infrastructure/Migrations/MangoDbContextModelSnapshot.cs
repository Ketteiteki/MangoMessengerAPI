// <auto-generated />
using System;
using MangoAPI.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangoAPI.Infrastructure.Migrations
{
    [DbContext(typeof(MangoDbContext))]
    partial class MangoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommunityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastMessageAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastMessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMessageTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ChatEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3340),
                            Description = "WSB Public Group",
                            Image = "wsb_group_logo.png",
                            LastMessageAuthor = "Szymon Murawski",
                            LastMessageText = "Great! Good luck to all of you",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3350),
                            MembersCount = 5,
                            Title = "WSB",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3345)
                        },
                        new
                        {
                            Id = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3353),
                            Description = "Extreme Code Main Public Group",
                            Image = "extreme_code_main.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "TypeScript The Best",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3355),
                            MembersCount = 4,
                            Title = "Extreme Code Main",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3353)
                        },
                        new
                        {
                            Id = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3358),
                            Description = "Extreme Code Flood Public Group",
                            Image = "extremecode_rest_logo.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Слава Партии!!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3360),
                            MembersCount = 4,
                            Title = "Extreme Code Flood",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3358)
                        },
                        new
                        {
                            Id = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3362),
                            Description = "Extreme Code C++ Public Group",
                            Image = "extremecode_cpp_logo.jpg",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3364),
                            MembersCount = 4,
                            Title = "Extreme Code C++",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3363)
                        },
                        new
                        {
                            Id = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            CommunityType = 2,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3366),
                            Description = "Extreme Code .NET Public Group",
                            Image = "extremecode_dotnet.png",
                            LastMessageAuthor = "Amelit",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3367),
                            MembersCount = 4,
                            Title = "Extreme Code .NET",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3366)
                        },
                        new
                        {
                            Id = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3369),
                            Description = "Direct chat between Khachatur Khachatryan and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3371),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / razumovsky r",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3370)
                        },
                        new
                        {
                            Id = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3374),
                            Description = "Direct chat between Мусяка Колбасяка and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3375),
                            MembersCount = 2,
                            Title = "Мусяка Колбасяка / razumovsky r",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3374)
                        },
                        new
                        {
                            Id = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3378),
                            Description = "Direct chat between Amelit and razumovsky r",
                            LastMessageAuthor = "razumovsky r",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3379),
                            MembersCount = 2,
                            Title = "Amelit / razumovsky r",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3378)
                        },
                        new
                        {
                            Id = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3381),
                            Description = "Direct chat between Khachatur Khachatryan and Мусяка Колбасяка",
                            LastMessageAuthor = "Khachatur Khachatryan",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3383),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / Мусяка Колбасяка",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3381)
                        },
                        new
                        {
                            Id = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            CommunityType = 1,
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3384),
                            Description = "Direct chat between Petro Kolosov and Szymon Murawski",
                            LastMessageAuthor = "Petro Kolosov",
                            LastMessageText = "Hello world!",
                            LastMessageTime = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3386),
                            MembersCount = 2,
                            Title = "Petro Kolosov / Szymon Murawski",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(3385)
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DiffieHellmanKeyExchangeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("KeyExchangeType")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ReceiverPublicKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("SenderPublicKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DiffieHellmanKeyExchangeEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DiffieHellmanParameterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("OpenSslDhParameter")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("DiffieHellmanParameterEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InReplayToAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InReplayToText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6443a4a7-96f8-4253-a91b-f906fdfd3a04"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hello guys, how your diploma project goes?",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9886),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("bb20fa7a-5962-4f24-87e2-0ed58135e383"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Well, I'm doing UI/UX part of the project",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9891),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("c0f6fae2-56a5-421e-b318-c2e54afe9879"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Hi teacher, I perform QA of the current version",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9894),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("18ec9146-6c5b-4ac3-838a-43302492cc88"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Greetings. I currently workout the back-end part",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9918),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("2077c39c-6af2-4bf1-a0cb-1517a3a0a57e"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "I work with backend too...",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9921),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("225bd5b3-d1cf-45b7-b661-c55d34e8e629"),
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            Content = "Great! Good luck to all of you",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9924),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("db3f5465-545a-4e0a-8ce4-721a94f52cf1"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9928),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("0f07b653-aa6b-4681-ab0c-d4914a7697d0"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "F# The Best",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9957),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("6aeb1b6d-88d5-4bba-b331-3920eacc62f1"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "C# The Best",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9959),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("5c1a65f6-1568-42e8-945a-75ce360f5db8"),
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            Content = "TypeScript The Best",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9963),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("2fe52358-0b3a-40cd-a7fc-1a1cc2cbf327"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9965),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("46f1bf87-7913-4f0b-8fee-087feeed7334"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9968),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("c6bd3838-13a1-4410-9ee9-c73fc317f97d"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9970),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("1d41f908-57fe-412c-bf8f-05894360a3db"),
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            Content = "Слава Партии!!",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9972),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("557b2d54-b68d-49b9-bc7b-39784106edbe"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9975),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("74f3ef71-b625-444b-bc12-670a03d9a059"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9981),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("9050d87e-1181-4df0-8001-3496e579e21f"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9983),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("99d97183-c8e1-4b25-b449-5c9b8bc38af1"),
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9985),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("68956ea8-de71-41ab-9a9b-97f588492d1b"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9988),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("e2ca67bf-91e1-4678-a91e-509dbd7d83cb"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9991),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("e13a2811-1ac8-49e5-8657-4bdb17408753"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9995),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("86e2e982-5a86-4fa5-b002-472a2da81255"),
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9997),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("54bf626c-bae7-4ad6-b6b5-48a48ef3f9ec"),
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 250, DateTimeKind.Utc).AddTicks(9999),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("64fa51a1-7f39-47e2-a8aa-b35d3db29e32"),
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(5),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("bb2bbc2c-d1a7-423c-8710-9210c123ce78"),
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(9),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("c5bf0fe4-8d5b-493b-adfe-e593b5e30b53"),
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(12),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("a447a16d-c724-488a-9236-db34f4af9d25"),
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(14),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        },
                        new
                        {
                            Id = new Guid("85e0bb6f-7250-4c23-9e50-048852e15d72"),
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(16),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("36e68ba9-7b61-4a30-adf7-38d021ada67e"),
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(19),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("b24063c7-fb1a-4524-bf91-a0a83e43e5f7"),
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            Content = "Hello World",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(21),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("170e26c5-e602-4628-be56-2e717ec01b29"),
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            Content = "Hi teacher",
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(25),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordRestoreRequestEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionEntity", "mango");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChatEntity", "mango");

                    b.HasData(
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b6ca4533-fc21-4f44-9747-687361e3031c"),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("0dae5a74-3528-4e85-95bb-2036bd80432c"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("5e656ec2-205f-471c-b095-1c80b93b7655"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("cd358b94-c3b9-4022-923a-13f787f70055"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("6f66e318-1e94-44ae-9b33-fe001e070842"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f5b7824f-e52b-4246-9984-06fc8e964f0c"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("f8729a12-5746-443f-ad31-378d846fce30"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("b119914a-6d95-4047-bf8a-db27deeb7dc9"),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("9f205dde-0ddc-401f-8fe9-6c794b661f5d"),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = new Guid("3fce8b2c-252d-4514-a1bb-fbdf73c47b78"),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            IsArchived = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a60a364-be2e-4469-8ed4-1241d5a1ab66"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8704),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("92ff1f0a-9fb5-45af-960e-1e047f5370de"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8710),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("d68ebb81-efb6-4b1e-9ad4-9becc6d677a4"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8712),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("abdb7063-6219-4941-9a22-66d4e21b80d7"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8715),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4")
                        },
                        new
                        {
                            Id = new Guid("5e5ccf58-a106-40dd-9599-45c20887c229"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8719),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("d2634e8f-5b69-407c-85f2-2e836b94bbbe"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8721),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("7b789b72-f7d1-4494-890e-9cd2bebcc03b"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8724),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("4696acf8-b91e-4c5f-a4e7-30184f7e9166"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8726),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c")
                        },
                        new
                        {
                            Id = new Guid("da735865-d69a-443e-89e4-723670210442"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8732),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("ef6a0c0a-a3ae-4b4c-9e66-4be69fc3d8c4"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8735),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("47188468-aea1-4fe3-af4a-cdc600339c1f"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8737),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("0ab6c3ae-3c5c-4124-9d70-19f48f5030a7"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8739),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9")
                        },
                        new
                        {
                            Id = new Guid("741544d7-241c-4df7-b757-84a21537be23"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8742),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("86035d60-6e63-41bb-969d-bd6883638085"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8744),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("102a9ebf-4977-4ec0-a89d-adba6eeaefe0"),
                            ContactId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8746),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("24d77019-6576-4e41-8820-436333c9d0b8"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8764),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7")
                        },
                        new
                        {
                            Id = new Guid("ff9c9392-02d6-4bb0-8656-2afb08c861b0"),
                            ContactId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8770),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("26ea91e6-837f-41de-8e57-c2c4ca0f6a97"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8772),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("42338da2-f8a2-45f2-97b0-4111b01c4082"),
                            ContactId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8775),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("bdce660f-be5c-4f0c-858f-fcd05352cb55"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8777),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c")
                        },
                        new
                        {
                            Id = new Guid("f65553c7-cc0c-4301-a8b9-fee57a3247f4"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8780),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a")
                        },
                        new
                        {
                            Id = new Guid("5e18a9d4-0834-4468-a5f3-340cca85798d"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8782),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("605c4c4e-10c1-4ae2-9934-c95cd8dfbedd"),
                            ContactId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8784),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("e5f3df05-fb99-47e6-a5f5-9c92bd0889c7"),
                            ContactId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8787),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("47fc46ba-81ef-4fe5-b7d5-c066c2107389"),
                            ContactId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8793),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("e5d23a20-21bf-4ec9-a14d-39257e58321b"),
                            ContactId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8795),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b")
                        },
                        new
                        {
                            Id = new Guid("b5142a5f-66a1-40ea-845f-1108cd04d14e"),
                            ContactId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8798),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b")
                        },
                        new
                        {
                            Id = new Guid("766cd4fc-40b1-4964-9e2d-9ab3a1834017"),
                            ContactId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 251, DateTimeKind.Utc).AddTicks(8800),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayNameColour")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("EmailCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("UserEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            AccessFailedCount = 0,
                            Bio = "13 y. o. | C# pozer, Hearts Of Iron IV noob",
                            ConcurrencyStamp = "a9d5ac9b-f635-4518-8f09-122e78a1966f",
                            DisplayName = "Khachatur Khachatryan",
                            DisplayNameColour = 6,
                            Email = "xachulxx@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "khachatur_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "XACHULXX@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA4cNlVib62NfSZqcKREuCLxfItBy2JAUr+lZ/EvkrOZh1RFPrL5OfA/HtnKbPjFgQ==",
                            PhoneNumber = "374775554310",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "KHACHATUR228"
                        },
                        new
                        {
                            Id = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            AccessFailedCount = 0,
                            Bio = "11011 y.o Dotnet Developer from $\"{cityName}\"",
                            ConcurrencyStamp = "bc38bbf6-829c-41ed-8f95-7dfc990b3116",
                            DisplayName = "razumovsky r",
                            DisplayNameColour = 9,
                            Email = "kolosovp95@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLOSOVP94@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+zUn48WO6hylzJe60G5HPLNPdcquN+osQPwj2ApF5gjY/2/IbrxDQpDnOPOYbvuQ==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "razumovsky_r"
                        },
                        new
                        {
                            Id = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            AccessFailedCount = 0,
                            Bio = "Колбасятор.",
                            ConcurrencyStamp = "57a77762-2f08-4ef8-8d86-d78e263022fd",
                            DisplayName = "Мусяка Колбасяка",
                            DisplayNameColour = 5,
                            Email = "kolbasator@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "musyaka_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLBASATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC049L9JeSl1FHwZzt3FMX4IAlPU+h73IsIyW1NEmwF/eLMj/dCOO0TNdYwGfkWYmQ==",
                            PhoneNumber = "77017506265",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "kolbasator"
                        },
                        new
                        {
                            Id = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0"),
                            AccessFailedCount = 0,
                            Bio = "Дипломат",
                            ConcurrencyStamp = "084c77f2-8474-4cc6-a71c-2759813b74e2",
                            DisplayName = "Amelit",
                            DisplayNameColour = 4,
                            Email = "amelit@gmail.com",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "amelit_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELIT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENeFgkYCMU0R6YzSMzXVFjXTFE6LZPgbUrhR38LkFJHwH/s8/qd9UGXa53H2khMxhw==",
                            PhoneNumber = "12025550152",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "TheMoonlightSonata"
                        },
                        new
                        {
                            Id = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "7a956478-966c-46cc-9400-cd6e790bf1ee",
                            DisplayName = "Petro Kolosov",
                            DisplayNameColour = 1,
                            Email = "petro.kolosov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "razumovsky_picture.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETRO.KOLOSOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAENluaIof/H7FHGB8be/gd2eSkx5f0kRk9MPAIVKa5nm5/aref8WZBroiRcvJcuaXkA==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "petro.kolosov"
                        },
                        new
                        {
                            Id = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            AccessFailedCount = 0,
                            Bio = "Teacher of Computer Science at WSB Poznan",
                            ConcurrencyStamp = "5112cdb4-2ed4-43de-8fe0-3bd591f947e2",
                            DisplayName = "Szymon Murawski",
                            DisplayNameColour = 7,
                            Email = "szymon.murawski@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "szymon_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SZYMON.MURAWSKI@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrI3LDVshMOeuN3+LvtrTdwiuEv/nkigMLiEY8f1PYOChHOzk6cFW+99SGriESKEg==",
                            PhoneNumber = "48743615532",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "szymon.murawski"
                        },
                        new
                        {
                            Id = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "243543f7-c4ac-4992-a075-0aa283b96144",
                            DisplayName = "Illia Zubachov",
                            DisplayNameColour = 4,
                            Email = "illia.zubachov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "illia_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILLIA.ZUBACHOW@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQKQDWuoiH/GBiFNdWZbAH//YYZSKMg9hhB4Ur6nIzPsHGVWiKSO7DuMxYJph0/cw==",
                            PhoneNumber = "48352643123",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "illia.zubachov"
                        },
                        new
                        {
                            Id = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "352c87b9-a7d7-445e-9b3b-9e1cd39834e4",
                            DisplayName = "Arslanbek Temirbekov",
                            DisplayNameColour = 2,
                            Email = "arslanbek.temirbekov@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "arslan_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARSLANBEK.TEMIRBEKOV@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAQ1Cb9HTpv997ClzeSCFUxJoChxNsNprcH3ZcKlsM7Eul4+JpugNdGKF/OG6pSk6A==",
                            PhoneNumber = "48278187781",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "arslanbek.temirbekov"
                        },
                        new
                        {
                            Id = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            AccessFailedCount = 0,
                            Bio = "Third year student of WSB at Poznan",
                            ConcurrencyStamp = "be36dff0-d7db-4581-89b0-a2a5cb609999",
                            DisplayName = "Serhii Holishevskii",
                            DisplayNameColour = 6,
                            Email = "serhii.holishevskii@wp.pl",
                            EmailCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            EmailConfirmed = true,
                            Image = "serhii_picture.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "SERHII.HOLISHEVSKII@WP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbQYm5sOuE/Zid/J0OarB7K2R4iDwn5bQaUAp2D/zNog2AFSFGYLG20liIu1O5Ueg==",
                            PhoneNumber = "48175481653",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "serhii.holishevskii"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformationEntity", "mango");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b746398a-8f31-4bd0-9e73-ef2af4734ad9"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4260),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4267),
                            Facebook = "petro.kolosov",
                            Instagram = "petro.kolosov",
                            LinkedIn = "petro.kolosov",
                            Twitter = "petro.kolosov",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4266),
                            UserId = new Guid("2cd4b9a0-f70d-476d-a3cc-908da43f93c4"),
                            Website = "petro.kolosov.com"
                        },
                        new
                        {
                            Id = new Guid("bd4fac59-ddc5-4cfd-a0ce-88e3e8b7727c"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4275),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4276),
                            Facebook = "illia.zubachov",
                            Instagram = "illia.zubachov",
                            LinkedIn = "illia.zubachov",
                            Twitter = "illia.zubachov",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4275),
                            UserId = new Guid("72a7a013-8bc4-4ae6-89cb-d9f19e0c9cf9"),
                            Website = "illia.zubachov.com"
                        },
                        new
                        {
                            Id = new Guid("5943ef49-f4f0-4905-8eea-4754ac42bf5c"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4302),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4304),
                            Facebook = "serhii.holishevskii",
                            Instagram = "serhii.holishevskii",
                            LinkedIn = "serhii.holishevskii",
                            Twitter = "serhii.holishevskii",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4303),
                            UserId = new Guid("d1ae1de1-1aa8-4650-937c-4ed882038ad7"),
                            Website = "serhii.holishevskii.com"
                        },
                        new
                        {
                            Id = new Guid("b5479599-b177-49c8-8c9a-704305dc53a9"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4308),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4310),
                            Facebook = "arslan.temirbekov",
                            Instagram = "arslan.temirbekov",
                            LinkedIn = "arslan.temirbekov",
                            Twitter = "arslan.temirbekov",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4309),
                            UserId = new Guid("56d6294f-7b80-4a78-856a-92b141de2d1c"),
                            Website = "arslan.temirbekov.com"
                        },
                        new
                        {
                            Id = new Guid("e23de845-97d9-432d-9187-4c44ab932abc"),
                            Address = "Poznan, Poland",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4313),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4315),
                            Facebook = "szymon.murawski",
                            Instagram = "szymon.murawski",
                            LinkedIn = "szymon.murawski",
                            Twitter = "szymon.murawski",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4314),
                            UserId = new Guid("5e7274ad-3132-4ad7-be36-38778a8f7b1c"),
                            Website = "szymon.murawski.com"
                        },
                        new
                        {
                            Id = new Guid("3f1b0f44-998c-461e-99ad-dcd188be89d6"),
                            Address = "Moscow, Russia",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4320),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4321),
                            Instagram = "khachapur.mudrenych",
                            LinkedIn = "khachapur.mudrenych",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4321),
                            UserId = new Guid("e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"),
                            Website = "khachapur.com"
                        },
                        new
                        {
                            Id = new Guid("b6fc351b-c9f1-4be3-bdff-f895b47304b5"),
                            Address = "Odessa, Ukraine",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4324),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4326),
                            Facebook = "razumovsky_r",
                            Instagram = "razumovsky_r",
                            LinkedIn = "razumovsky_r",
                            Twitter = "razumovsky_r",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4325),
                            UserId = new Guid("fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"),
                            Website = "razumovsky.com"
                        },
                        new
                        {
                            Id = new Guid("57b381fc-967a-4cad-b43e-d78a6a68ef64"),
                            Address = "Saint-Petersburg, Russia",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4330),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4331),
                            Facebook = "kolbasator",
                            ProfilePicture = "profile.png",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4330),
                            UserId = new Guid("5b515247-f6f5-47e1-ad06-95f317a0599b"),
                            Website = "kolbasator.com"
                        },
                        new
                        {
                            Id = new Guid("1287ae35-d0be-4405-883c-14d6810d535a"),
                            Address = "Moscow, Russia",
                            BirthDay = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4335),
                            CreatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4336),
                            Facebook = "TheMoonlightSonata",
                            Instagram = "TheMoonlightSonata",
                            Twitter = "TheMoonlightSonata",
                            UpdatedAt = new DateTime(2022, 11, 4, 12, 51, 21, 313, DateTimeKind.Utc).AddTicks(4335),
                            UserId = new Guid("d942706b-e4e2-48f9-bbdc-b022816471f0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.DocumentEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.PasswordRestoreRequestEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("PasswordRestoreRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MangoAPI.Domain.Entities.UserInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Documents");

                    b.Navigation("Messages");

                    b.Navigation("PasswordRestoreRequests");

                    b.Navigation("Sessions");

                    b.Navigation("UserChats");

                    b.Navigation("UserInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
