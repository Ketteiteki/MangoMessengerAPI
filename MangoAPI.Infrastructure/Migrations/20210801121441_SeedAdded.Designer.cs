// <auto-generated />
using System;
using MangoAPI.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MangoAPI.Infrastructure.Migrations
{
    [DbContext(typeof(MangoPostgresDbContext))]
    [Migration("20210801121441_SeedAdded")]
    partial class SeedAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ChatType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            ChatType = 3,
                            Created = new DateTime(2020, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code Main"
                        },
                        new
                        {
                            Id = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            ChatType = 3,
                            Created = new DateTime(2020, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code Flood"
                        },
                        new
                        {
                            Id = "cd358b94-c3b9-4022-923a-13f787f70055",
                            ChatType = 3,
                            Created = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code C++"
                        },
                        new
                        {
                            Id = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            ChatType = 3,
                            Created = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 4,
                            Title = "Extreme Code .NET"
                        },
                        new
                        {
                            Id = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / razumovsky r"
                        },
                        new
                        {
                            Id = "f8729a12-5746-443f-ad31-378d846fce30",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Мусяка Колбасяка / razumovsky r"
                        },
                        new
                        {
                            Id = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Amelit / razumovsky r"
                        },
                        new
                        {
                            Id = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            ChatType = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembersCount = 2,
                            Title = "Khachatur Khachatryan / Мусяка Колбасяка"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "bb431cae-3df2-4c5b-9b63-cff0b74ff0d1",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 13, 49, 21, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "0c9466df-1ea2-48b8-a9f5-d5d9bd57be15",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "F# The Best",
                            Created = new DateTime(2021, 8, 1, 14, 21, 56, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "05597aa2a-4f7a-4d6d-8fdc-5d91dfce6101",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "C# The Best",
                            Created = new DateTime(2021, 8, 1, 14, 22, 12, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "d6fe2012-3a5e-4b36-baa8-eec4ba6a87f2",
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            Content = "TypeScript The Best",
                            Created = new DateTime(2021, 8, 1, 14, 32, 32, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "8c0f730d-6b36-4071-bac9-08a5db5a54bd",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "cded3336-015b-4b33-a0d2-66b5c06a97bf",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 43, 36, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "83b3fe85-aa37-4692-b561-aa29c1c7b448",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 45, 13, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "af2b6605-7b5b-4151-abb6-dc7a28138215",
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            Content = "Слава Партии!!",
                            Created = new DateTime(2021, 8, 1, 18, 45, 56, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "33ac80b1-0d3e-46cd-8175-e6e02350296e",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "644efffa-b05c-4f12-9b51-19fd098835a5",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "7d525aac-81d3-4001-b1d3-373e449cbfa8",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "0f9e236f-f68b-48b7-a330-eb8079277b9e",
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "dd870cc5-0acd-4dfd-9f76-e60504a6df7f",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "920a773e-828f-4cfe-9c05-5912a942eaa6",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 27, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "b75ff619-8a7c-4b7d-837d-c8e46bd4579e",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 32, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "6689401f-cb3e-484c-a3e9-a12f551b5e38",
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 18, 43, 53, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "6d49b347-c544-4d57-8f06-cf1d6994cdd0",
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 42, 14, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "462209ae-c7a1-4021-8e55-1dd84b0cc86d",
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 46, 29, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "e5626507-b84d-4850-914c-a2ac8ae8d2d1",
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 44, 12, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "c6552cd3-60a9-41b8-822a-57e07c84d805",
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 44, 59, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "d8792fca-23df-4ae1-b83a-8a9aa5cc827a",
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        },
                        new
                        {
                            Id = "fbe0857c-dc77-44c7-9b3b-799a17e0869a",
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "c1d5d83c-447f-4320-8894-d5266090a9f5",
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 21, 5, 0, DateTimeKind.Unspecified),
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "c4635d82-0703-4fe6-8836-be849482ec88",
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            Content = "Hello World",
                            Created = new DateTime(2021, 8, 1, 14, 31, 23, 0, DateTimeKind.Unspecified),
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = "0dae5a74-3528-4e85-95bb-2036bd80432c",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 2
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "5e656ec2-205f-471c-b095-1c80b93b7655",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 3
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "cd358b94-c3b9-4022-923a-13f787f70055",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 4
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "6f66e318-1e94-44ae-9b33-fe001e070842",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f5b7824f-e52b-4246-9984-06fc8e964f0c",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "f8729a12-5746-443f-ad31-378d846fce30",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "b119914a-6d95-4047-bf8a-db27deeb7dc9",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            RoleId = 1
                        },
                        new
                        {
                            ChatId = "9f205dde-0ddc-401f-8fe9-6c794b661f5d",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ContactId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactEntity");

                    b.HasData(
                        new
                        {
                            Id = "e744e03d-2739-4bdc-aa93-8fa1618b8548",
                            ContactId = "b93e413b-54dd-4dfb-9d88-b6cd47d39afe",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a"
                        },
                        new
                        {
                            Id = "950750fc-91af-4bdc-b9cb-46c8b0fd5073",
                            ContactId = "cbeb39a3-563a-4cbc-b077-f3e08bff9f50",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b"
                        },
                        new
                        {
                            Id = "f11d2294-1db9-41f0-8a40-601800967889",
                            ContactId = "8f7c7749-c644-4d42-8a44-e509e4fa655d",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b"
                        },
                        new
                        {
                            Id = "14b62bb7-bacd-457c-8b2b-c9effc83d838",
                            ContactId = "677de87e-e041-437f-a95a-0ca3aaf88081",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("ConfirmationCode")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            AccessFailedCount = 0,
                            Bio = "13 y. o. | C# pozer",
                            ConcurrencyStamp = "9e6b9ea7-461c-4285-b99b-a0e65c05c0f3",
                            DisplayName = "Khachatur Khachatryan",
                            Email = "xachulxx@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDz1x10ejBYPaKgQAz3I61UGPBculigLAlaRQFL2EYRa6G6jm5Oge7gCg1dRmxmlRA==",
                            PhoneNumber = "+374 775 55 43 10",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "75871266-3058-4362-9ff6-ed8e821191da",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            AccessFailedCount = 0,
                            Bio = "11011 y.o Dotnet Developer from $\"{cityName}\"",
                            ConcurrencyStamp = "74572c2f-0680-4202-beda-542af6d7caa9",
                            DisplayName = "razumovsky r",
                            Email = "kolosovp@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDz1x10ejBYPaKgQAz3I61UGPBculigLAlaRQFL2EYRa6G6jm5Oge7gCg1dRmxmlRA==",
                            PhoneNumber = "+48 577 615 532",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d24e13e6-996e-49d0-b845-e97d3ad66397",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            AccessFailedCount = 0,
                            Bio = "Колбасятор.",
                            ConcurrencyStamp = "d8786a22-3f88-44a2-bc7c-e0b9927933c5",
                            DisplayName = "Мусяка Колбасяка",
                            Email = "kolbasator@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDz1x10ejBYPaKgQAz3I61UGPBculigLAlaRQFL2EYRa6G6jm5Oge7gCg1dRmxmlRA==",
                            PhoneNumber = "+7 701 750 62 65",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b88448d1-ebc4-419c-94dd-b1b51aabc39c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d942706b-e4e2-48f9-bbdc-b022816471f0",
                            AccessFailedCount = 0,
                            Bio = "Дипломат",
                            ConcurrencyStamp = "6d5e28bd-69e1-4c31-882e-ea34fdac4e25",
                            DisplayName = "Amelit",
                            Email = "amelit@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDz1x10ejBYPaKgQAz3I61UGPBculigLAlaRQFL2EYRa6G6jm5Oge7gCg1dRmxmlRA==",
                            PhoneNumber = "+1 202 555 0152",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5ff2defc-0620-4444-aefc-619007adefd1",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformationEntity");

                    b.HasData(
                        new
                        {
                            Id = "3067c801-da6d-4b03-ac5e-ad3fa0db5acf",
                            BirthDay = new DateTime(2008, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Khachatur",
                            Instagram = "khachapur.mudrenych",
                            LastName = "Khachatryan",
                            LinkedIn = "khachapur.mudrenych",
                            UserId = "e77cf2cb-3f3a-4f0b-ac5a-90a3263d075a",
                            Website = "khachapur.com"
                        },
                        new
                        {
                            Id = "11da38d9-13e2-4056-80a7-a8a76b1c0682",
                            Address = "Poland, Krakov",
                            BirthDay = new DateTime(1994, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "razumovsky",
                            LastName = "r",
                            Twitter = "razumovsky_r",
                            UserId = "fd3c67c5-c6ff-4a5d-a166-98ece1b7752b",
                            Website = "razumovsky.com"
                        },
                        new
                        {
                            Id = "91d1d13e-e475-4f77-820a-0225c37035a4",
                            Facebook = "kolbasator",
                            FirstName = "Мусяка",
                            LastName = "Колбасяка",
                            ProfilePicture = "profile.png",
                            UserId = "5b515247-f6f5-47e1-ad06-95f317a0599b",
                            Website = "kolbasator.com"
                        },
                        new
                        {
                            Id = "f3fbbce4-b451-4d2b-bfb4-662a9c87c315",
                            Facebook = "TheMoonlightSonata",
                            FirstName = "Amelit",
                            Instagram = "TheMoonlightSonata",
                            Twitter = "TheMoonlightSonata",
                            UserId = "d942706b-e4e2-48f9-bbdc-b022816471f0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserChatEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserContactEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserInformationEntity", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("MangoAPI.Domain.Entities.UserInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MangoAPI.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MangoAPI.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Messages");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserChats");

                    b.Navigation("UserInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
